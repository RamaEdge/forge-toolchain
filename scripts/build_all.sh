#!/bin/bash
# ForgeOS All Toolchains Build Script
# Builds both musl and glibc toolchains
# Usage: build_all.sh <arch> <build_dir> <artifacts_dir> [platform]

set -euo pipefail

# Script configuration - Detect project root using git
# This ensures we find the correct root regardless of script location or invocation directory
if ! PROJECT_ROOT="$(git rev-parse --show-toplevel 2>/dev/null)"; then
    # Fallback to script-based detection if not in a git repository
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
    echo "Warning: Not in a git repository. Using fallback project root detection." >&2
    echo "Project root: $PROJECT_ROOT" >&2
fi

# Parameters
ARCH="${1:-aarch64}"
BUILD_DIR="${2:-build}"
ARTIFACTS_DIR="${3:-artifacts}"
PLATFORM="${4:-$(uname -s | tr '[:upper:]' '[:lower:]')}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[✓]${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[!]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[✗]${NC} $1" >&2
}

log_info "Building all toolchains for $ARCH"
log_info "Platform: $PLATFORM"
log_info "Build directory: $BUILD_DIR"
log_info "Artifacts directory: $ARTIFACTS_DIR"

# Build musl toolchain
log_info "Building musl toolchain..."
if "$PROJECT_ROOT/scripts/build_musl.sh" "$ARCH" "$BUILD_DIR" "$ARTIFACTS_DIR" "$PLATFORM"; then
    log_success "musl toolchain built successfully"
else
    log_error "musl toolchain build failed"
    exit 1
fi

# Build glibc toolchain
log_info "Building glibc toolchain..."
if "$PROJECT_ROOT/scripts/build_glibc.sh" "$ARCH" "$BUILD_DIR" "$ARTIFACTS_DIR" "$PLATFORM"; then
    log_success "glibc toolchain built successfully"
else
    log_error "glibc toolchain build failed"
    exit 1
fi

# Create combined environment script
log_info "Creating combined environment script..."
COMBINED_ENV="$ARTIFACTS_DIR/env.sh"
cat > "$COMBINED_ENV" << EOF
#!/bin/bash
# ForgeOS Combined Toolchain Environment
# Generated by build_all.sh

# Toolchain selection
TOOLCHAIN_TYPE="\${1:-musl}"

case "\$TOOLCHAIN_TYPE" in
    "musl")
        if [[ -f "$ARTIFACTS_DIR/$ARCH-musl/env.sh" ]]; then
            source "$ARTIFACTS_DIR/$ARCH-musl/env.sh"
        else
            echo "Error: musl toolchain not found at $ARTIFACTS_DIR/$ARCH-musl/"
            exit 1
        fi
        ;;
    "gnu"|"glibc")
        if [[ -f "$ARTIFACTS_DIR/$ARCH-gnu/env.sh" ]]; then
            source "$ARTIFACTS_DIR/$ARCH-gnu/env.sh"
        else
            echo "Error: glibc toolchain not found at $ARTIFACTS_DIR/$ARCH-gnu/"
            exit 1
        fi
        ;;
    *)
        echo "Error: Unknown toolchain type: \$TOOLCHAIN_TYPE"
        echo "Usage: source $COMBINED_ENV [musl|gnu]"
        exit 1
        ;;
esac
EOF

chmod +x "$COMBINED_ENV"
log_success "Combined environment script created: $COMBINED_ENV"

# Create build summary
log_info "Creating build summary..."
BUILD_SUMMARY="$ARTIFACTS_DIR/build_summary.txt"
cat > "$BUILD_SUMMARY" << EOF
# ForgeOS Toolchain Build Summary
# Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
# Source date epoch: $SOURCE_DATE_EPOCH

## Build Configuration
- Architecture: $ARCH
- Platform: $PLATFORM
- Build directory: $BUILD_DIR
- Artifacts directory: $ARTIFACTS_DIR

## Built Toolchains

### musl Toolchain
- Location: $ARTIFACTS_DIR/$ARCH-musl/
- Environment: $ARTIFACTS_DIR/$ARCH-musl/env.sh
- Target: $ARCH-linux-musl
- Cross-compile: $ARCH-linux-musl-

### glibc Toolchain
- Location: $ARTIFACTS_DIR/$ARCH-gnu/
- Environment: $ARTIFACTS_DIR/$ARCH-gnu/env.sh
- Target: $ARCH-linux-gnu
- Cross-compile: $ARCH-linux-gnu-

## Usage

### Individual Toolchains
\`\`\`bash
# Use musl toolchain
source $ARTIFACTS_DIR/$ARCH-musl/env.sh

# Use glibc toolchain
source $ARTIFACTS_DIR/$ARCH-gnu/env.sh
\`\`\`

### Combined Environment
\`\`\`bash
# Use musl toolchain (default)
source $COMBINED_ENV

# Use glibc toolchain
source $COMBINED_ENV gnu
\`\`\`

## Verification
\`\`\`bash
# Verify musl toolchain
$ARTIFACTS_DIR/$ARCH-musl/bin/$ARCH-linux-musl-gcc --version

# Verify glibc toolchain
$ARTIFACTS_DIR/$ARCH-gnu/bin/$ARCH-linux-gnu-gcc --version
\`\`\`
EOF

log_success "Build summary created: $BUILD_SUMMARY"

log_success "All toolchains built successfully!"
log_info "Build summary: $BUILD_SUMMARY"
log_info "Combined environment: $COMBINED_ENV"
log_info ""
log_info "Usage examples:"
log_info "  source $COMBINED_ENV          # Use musl toolchain"
log_info "  source $COMBINED_ENV gnu      # Use glibc toolchain"
